/**
 * This class file was automatically generated by jASN1 (http://www.beanit.com)
 */

package util;

import com.beanit.jasn1.ber.BerLength;
import com.beanit.jasn1.ber.BerTag;
import com.beanit.jasn1.ber.ReverseByteArrayOutputStream;
import com.beanit.jasn1.ber.types.BerInteger;
import com.beanit.jasn1.ber.types.BerType;
import com.beanit.jasn1.ber.types.string.BerUTF8String;

import java.io.*;


public class GenericCallDataRecord implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger recordNumber = null;
	private BerUTF8String callingNumber = null;
	private BerUTF8String calledNumber = null;
	private BerUTF8String startDate = null;
	private BerUTF8String startTime = null;
	private BerInteger duration = null;
	
	public GenericCallDataRecord() {
	}

	public GenericCallDataRecord(byte[] code) {
		this.code = code;
	}

	public void setRecordNumber(BerInteger recordNumber) {
		this.recordNumber = recordNumber;
	}

	public BerInteger getRecordNumber() {
		return recordNumber;
	}

	public void setCallingNumber(BerUTF8String callingNumber) {
		this.callingNumber = callingNumber;
	}

	public BerUTF8String getCallingNumber() {
		return callingNumber;
	}

	public void setCalledNumber(BerUTF8String calledNumber) {
		this.calledNumber = calledNumber;
	}

	public BerUTF8String getCalledNumber() {
		return calledNumber;
	}

	public void setStartDate(BerUTF8String startDate) {
		this.startDate = startDate;
	}

	public BerUTF8String getStartDate() {
		return startDate;
	}

	public void setStartTime(BerUTF8String startTime) {
		this.startTime = startTime;
	}

	public BerUTF8String getStartTime() {
		return startTime;
	}

	public void setDuration(BerInteger duration) {
		this.duration = duration;
	}

	public BerInteger getDuration() {
		return duration;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += duration.encode(reverseOS, false);
		// write tag: APPLICATION_CLASS, PRIMITIVE, 19
		reverseOS.write(0x53);
		codeLength += 1;
		
		codeLength += startTime.encode(reverseOS, false);
		// write tag: APPLICATION_CLASS, PRIMITIVE, 18
		reverseOS.write(0x52);
		codeLength += 1;
		
		codeLength += startDate.encode(reverseOS, false);
		// write tag: APPLICATION_CLASS, PRIMITIVE, 16
		reverseOS.write(0x50);
		codeLength += 1;
		
		codeLength += calledNumber.encode(reverseOS, false);
		// write tag: APPLICATION_CLASS, PRIMITIVE, 9
		reverseOS.write(0x49);
		codeLength += 1;
		
		codeLength += callingNumber.encode(reverseOS, false);
		// write tag: APPLICATION_CLASS, PRIMITIVE, 8
		reverseOS.write(0x48);
		codeLength += 1;
		
		codeLength += recordNumber.encode(reverseOS, false);
		// write tag: APPLICATION_CLASS, PRIMITIVE, 2
		reverseOS.write(0x42);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public void test(ByteArrayInputStream bis){
		InputStream is = bis;
		try {
			decode(is);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 2)) {
			recordNumber = new BerInteger();
			subCodeLength += recordNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 8)) {
			callingNumber = new BerUTF8String();
			subCodeLength += callingNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 9)) {
			calledNumber = new BerUTF8String();
			subCodeLength += calledNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 16)) {
			startDate = new BerUTF8String();
			subCodeLength += startDate.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 18)) {
			startTime = new BerUTF8String();
			subCodeLength += startTime.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 19)) {
			duration = new BerInteger();
			subCodeLength += duration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordNumber != null) {
			sb.append("recordNumber: ").append(recordNumber);
		}
		else {
			sb.append("recordNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (callingNumber != null) {
			sb.append("callingNumber: ").append(callingNumber);
		}
		else {
			sb.append("callingNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (calledNumber != null) {
			sb.append("calledNumber: ").append(calledNumber);
		}
		else {
			sb.append("calledNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (startDate != null) {
			sb.append("startDate: ").append(startDate);
		}
		else {
			sb.append("startDate: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (startTime != null) {
			sb.append("startTime: ").append(startTime);
		}
		else {
			sb.append("startTime: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (duration != null) {
			sb.append("duration: ").append(duration);
		}
		else {
			sb.append("duration: <empty-required-field>");
		}
		
	}

}

